{"version":3,"sources":["country.jsx","typeaheadOptions.jsx","typeahead.jsx","loader.jsx","hooks/useFetch.js","Map.jsx","App.js","constants.js","index.js"],"names":["yieldSelf","n","displayFuncs","toLocaleString","langArr","map","l","name","join","keyDisplayNames","Country","country","console","log","window","Object","entries","k","v","TypeaheadOptions","options","filterValue","filter","opt","RegExp","test","value","className","Typeahead","selectedCountry","setSelectedCountry","useState","inputVal","setInputVal","focused","setFocused","onOptionSelection","countryName","tabIndex","type","id","placeholder","onChange","e","target","onKeyDown","key","onKeyPress","onFocus","onClick","innerText","useFetch","baseUrl","isFetching","setIsFetching","get","url","a","method","headers","finalUrl","fetch","response","json","data","ok","Error","status","Map","latitude","longitude","FlyTo","useMap","zoomLevel","zoomSwitcher","area","flyTo","duration","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","App","countryMap","setCountryMap","_setSelectedCountry","countryNameList","setNameList","toLowerCase","useEffect","fetchCountryList","then","countryList","countries","buildInitialState","res","mapObj","nameList","forEach","push","len","length","selected","Math","round","random","chooseRandomCountry","selectedCountryObj","latlng","width","src","flag","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.044f5937.chunk.js","sourcesContent":["const yieldSelf = n => n;\n\n// only mapping things I care about displaying\nconst displayFuncs = {\n  \"area\": n => n.toLocaleString() + \" kmÂ²\",\n  \"capital\": yieldSelf,\n  \"demonym\": yieldSelf,\n  \"languages\": (langArr) => {\n    const langs = langArr.map(l => l.name);\n    return langs.join(\", \");\n  },\n  \"name\": yieldSelf,\n  \"nativeName\": yieldSelf,\n  \"population\": n => n.toLocaleString(),\n  \"subregion\": yieldSelf,\n};\n\nconst keyDisplayNames = {\n  \"area\": \"Area\",\n  \"capital\": \"Capital\",\n  \"demonym\": \"Demonym\",\n  \"languages\": \"Languages\",\n  \"name\": \"Name\",\n  \"nativeName\": \"Native Name\",\n  \"population\": \"Population\",\n  \"subregion\": \"Sub-region\",\n};\n\n\nconst Country = ({country}) => {\n  console.log(country);\n  window.country = country;\n  if (!country) return null;\n\n  return (\n    Object.entries(country).map(([k, v]) => {\n      if (k in displayFuncs) {\n        return <p key={k}>{keyDisplayNames[k]}: {displayFuncs[k](v)}</p>\n      } else { return null; }\n    })\n  );\n};\n\nexport default Country;\n","// Uses filter value to display only the options that match\nconst TypeaheadOptions = ({options, filterValue}) => {\n  const filterOptions = () => {\n    if (!filterValue) return options;\n\n    return options.filter(opt => RegExp(filterValue, 'i').test(opt))\n  };\n\n  return (\n    <>\n      {filterOptions().map(opt => (\n        <p value={opt} key={opt} className=\"country-dropdown-option\">{opt}</p>\n      ))}\n    </>\n  );\n};\n\nexport default TypeaheadOptions;\n","import { useState } from \"react\";\nimport TypeaheadOptions from \"./typeaheadOptions\";\n\nconst Typeahead = ({ options, selectedCountry, setSelectedCountry }) => {\n  const [inputVal, setInputVal] = useState(selectedCountry);\n  const [focused, setFocused] = useState(false);\n  const inputId = \"typeahead-input\";\n\n  const onOptionSelection = (countryName) => {\n    console.log(\"on option selection\")\n    setInputVal(countryName);\n    setSelectedCountry(countryName);\n    setFocused(false);\n  };\n\n  const cancel = () => {\n    // setInputVal(selectedCountry);\n    setFocused(false);\n  };\n\n  const onChange = (e) => {\n    setInputVal(e.target.value);\n  };\n\n  const onKeyDown = (e) => {\n    console.log(\"KeyDown: \", e.key);\n    if (e.key !== \"Escape\") return;\n    cancel();\n  };\n\n  const onKeyPress = (e) => {\n    if (e.key !== \"Enter\") return;\n    onOptionSelection(inputVal);\n  }\n\n  // const onBlur = (e) => {\n  //   console.log(\"on blur: \", e.target);\n  //   if (e.target.id === inputId) { // doesn't work, still triggers on any click anywhere\n  //     return;\n  //   }\n  //\n  //   cancel();\n  // }\n\n  return (\n    <div className=\"typeahead-container\">\n      <input\n        tabIndex=\"1\"\n        type=\"text\"\n        id={inputId}\n        className=\"typeahead-input width-100\"\n        placeholder=\"Choose a country\"\n        value={inputVal}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        onKeyPress={onKeyPress}\n        // onMouseDown={() => console.log(\"on mouse down\")}\n        onFocus={() => setFocused(true)}\n        // onBlur={onBlur}  onblur intercepts the on mouse down even?\n      />\n      { focused && (\n        <div\n          className=\"country-dropdown width-100\"\n          onClick={(e) => onOptionSelection(e.target.innerText)}\n        >\n          <TypeaheadOptions options={options} filterValue={inputVal} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Typeahead;\n","import \"./loader.css\"\n\nexport default function () {\n  return (\n    <div className=\"lds-ripple\">\n      <div></div>\n      <div></div>\n    </div>\n  );\n}\n","import { useState } from \"react\";\n\nfunction useFetch(baseUrl) {\n  const [isFetching, setIsFetching] = useState(false);\n\n  const get = async (\n    url,\n    method = \"GET\",\n    // headers = { \"Content-Type\": \"application/json\" }, // was causing a CORS error\n    headers = {},\n    options\n  ) => {\n    setIsFetching(true);\n\n    const finalUrl = baseUrl + url;\n\n    try {\n      console.log(\"Fetching url: \", finalUrl);\n      const response = await fetch(finalUrl, { method, headers, ...options });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`Request received code: ${response.status}`);\n      }\n\n      return data;\n    } catch (err) {\n      throw(err);\n    } finally {\n      setIsFetching(false);\n    }\n  };\n\n  return {\n    isFetching,\n    get,\n  }\n}\n\nexport default useFetch;\n","import {\n  MapContainer,\n  Marker,\n  Popup,\n  TileLayer,\n  useMap,\n} from \"react-leaflet\";\n\n\nconst Map = ({latitude, longitude, country}) => {\n  const FlyTo = () => {\n    const map = useMap();\n    const zoomLevel = zoomSwitcher(country.area);\n\n    // [lat, lng], zoomLevel, duration in seconds\n    map.flyTo([latitude, longitude], zoomLevel, { duration: 2 })\n\n    return null;\n  };\n\n  const zoomSwitcher = (area) => {\n    if (!area) { return 6; }\n    if (area < 1) { return 12; }\n    if (area < 1000) { return 10; }\n    if (area < 50000) { return 8; }\n    if (area < 100000) { return 7; }\n    if (area < 1000000) { return 6; }\n    if (area <= 10000000) { return 4; }\n    if (area > 10000000) { return 2; }\n  }\n\n  return (\n    <MapContainer\n      center={[latitude, longitude]}\n      zoom={4}\n      scrollWheelZoom={true}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <FlyTo />\n      {/*<Marker position={[lat, lng]}>*/}\n      {/*  <Popup>*/}\n      {/*    A pretty CSS3 popup. <br/> Easily customizable.*/}\n      {/*  </Popup>*/}\n      {/*</Marker>*/}\n    </MapContainer>\n  );\n};\n\nexport default Map;\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { API_BASE_URL } from \"./constants\";\nimport Country from \"./country\";\nimport Typeahead from \"./typeahead\";\nimport Loader from \"./loader\";\nimport useFetch from \"./hooks/useFetch\";\nimport Map from \"./Map\";\n\nfunction App() {\n  const [countryMap, setCountryMap] = useState({});\n  const [selectedCountry, _setSelectedCountry] = useState(null);\n  const [countryNameList, setNameList] = useState([]); // for display with proper case\n  const { isFetching, get } = useFetch(`${API_BASE_URL}`);\n\n  // Simple wrapper so we don't have to care about string case\n  const setSelectedCountry = (countryName) => _setSelectedCountry(countryName.toLowerCase());\n\n  useEffect(() => {\n    fetchCountryList()\n      .then((countryList) => {\n        window.countries = countryList; // for dev\n        buildInitialState(countryList)\n      });\n  }, []);\n\n  const fetchCountryList = async () => {\n    const res = await get(\"/all\")\n    return res;\n  }\n\n  const chooseRandomCountry = (countryList) => {\n    const len = countryList.length;\n    const idx = Math.round(Math.random() * len);\n    const selected = countryList[idx]\n    setSelectedCountry(selected.name);\n  };\n\n  const buildInitialState = (countryList) => {\n    const mapObj = {};\n    const nameList = [];\n\n    countryList.forEach(country => {\n      mapObj[country.name.toLowerCase()] = country;\n      nameList.push(country.name);\n    });\n\n    setCountryMap(mapObj);\n    setNameList(nameList);\n    chooseRandomCountry(countryList);\n  };\n\n  const selectedCountryObj = countryMap[selectedCountry] || {};\n  let center = null;\n  if (selectedCountryObj) {\n    center = selectedCountryObj.latlng;\n  }\n\n  return (\n    <div className=\"App\">\n      { isFetching && <Loader />}\n      { !isFetching && (\n        <>\n          <div className=\"flex-container\">\n            <div className=\"column flag-display\">\n              <>\n                <img id=\"flag\" width=\"250\" src={selectedCountryObj?.flag} />\n                <Country country={selectedCountryObj} />\n              </>\n            </div>\n            {center && <Map\n              country={selectedCountryObj}\n              latitude={center[0]}\n              longitude={center[1]}\n            /> }\n            <div className=\"column country-list\">\n              <Typeahead\n                options={countryNameList}\n                selectedCountry={selectedCountry}\n                setSelectedCountry={setSelectedCountry}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","export const API_BASE_URL = \"https://restcountries.eu/rest/v2\"\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}