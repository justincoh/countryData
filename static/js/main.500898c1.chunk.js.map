{"version":3,"sources":["util.js","country.jsx","typeaheadOptions.jsx","typeahead.jsx","loader.jsx","hooks/useFetch.js","hooks/useWindowSize.js","Map.jsx","weather.js","constants.js","App.js","index.js"],"names":["getLocalTime","tzString","date","Date","utc","getTime","getTimezoneOffset","offset","result","match","sign","hours","halfHours","parseFloat","getOffsetFloat","toLocaleTimeString","timeStyle","yieldSelf","n","displayFuncs","toLocaleString","langArr","map","l","name","join","zoneArray","length","keyDisplayNames","keyDisplayOrder","Country","country","window","k","TypeaheadOptions","options","filterValue","filterStr","replaceAll","filter","opt","RegExp","test","filterOptions","value","className","Typeahead","selectedCountryName","setSelectedCountryName","useState","inputVal","setInputVal","focused","setFocused","inputRef","createRef","onOptionSelection","countryName","tabIndex","type","id","placeholder","onChange","e","target","onKeyDown","key","onKeyPress","onFocus","ref","onClick","current","focus","innerText","useFetch","baseUrl","isFetching","setIsFetching","get","url","a","method","headers","finalUrl","fetch","response","json","data","ok","Error","status","useWindowSize","width","height","windowSize","setWindowSize","useEffect","addEventListener","func","wait","timeout","clearTimeout","setTimeout","debounce","handleResize","removeEventListener","innerWidth","innerHeight","Map","latitude","longitude","FlyTo","useMap","zoomLevel","zoomSwitcher","area","flyTo","duration","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","Weather","lat","lng","weather","setWeather","buildWeatherUrl","then","catch","console","error","currentWeather","main","temp","Math","round","desc","feelsLike","feels_like","App","countryMap","setCountryMap","_setSelectedCountryName","countryNameList","setNameList","getCountries","toLowerCase","fetchCountryList","countryList","countries","buildInitialState","res","mapObj","nameList","forEach","push","len","selected","random","chooseRandomCountry","selectedCountryObj","latlng","src","flag","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.500898c1.chunk.js","sourcesContent":["import {WEATHER_API_BASE_URL, WEATHER_APP_ID} from \"./constants\";\n\nexport const buildWeatherUrl = (lat, lng) =>\n  `${WEATHER_API_BASE_URL}?lat=${lat}&lon=${lng}&appid=${WEATHER_APP_ID}&units=imperial`\n\nconst getOffsetFloat = (tzString) => {\n  // where tzstring looks like \"UTC+05:30\"\n  const result = tzString.match(/(\\+|-)(\\d+):(\\d+)/);\n\n  // This means we're in \"UTC\"\n  if (result === null) return 0;\n\n  // sign is + or -\n  const [_, sign, hours, minutes] = result;\n\n  let halfHours = 0.0;\n\n  if (minutes !== \"00\") {\n    halfHours = .5;\n  }\n\n  return parseFloat(`${sign}${parseFloat(hours) + halfHours}`)\n};\n\n// pretty much just pasted from here\n// https://stackoverflow.com/questions/8207655/get-time-of-specific-timezone\nexport const getLocalTime = (tzString) => {\n  // create Date object for current location\n  const date = new Date();\n\n  // convert to ms\n  // subtract local time zone offset\n  const utc = date.getTime() + (date.getTimezoneOffset() * 60000);\n\n  // create new Date object for different country\n  // using supplied offset\n  const offset = getOffsetFloat(tzString);\n  const dateWithOffset = new Date(utc + (3600000 * offset));\n\n  // return time as a string, \"short\" means \"no seconds\"\n  return dateWithOffset.toLocaleTimeString([], { timeStyle: \"short\" });\n};\n\nexport const throttle = (func, limit) => {\n  let blocked\n  return function() {\n    if (!blocked) {\n      func();\n      blocked = true\n      setTimeout(() => blocked = false, limit)\n    }\n  }\n};\n\nexport const debounce = (func, wait) => {\n  let timeout\n  return function() {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => func(), wait)\n  }\n}\n","import { getLocalTime } from \"./util\";\n\nconst yieldSelf = n => n;\n\n// only mapping things I care about displaying\nconst displayFuncs = {\n  \"area\": n => n? n.toLocaleString() + \" kmÂ²\" : \"--\",\n  \"capital\": yieldSelf,\n  \"demonym\": yieldSelf,\n  \"languages\": (langArr) => {\n    const langs = langArr.map(l => l.name);\n    return langs.join(\", \");\n  },\n  \"name\": yieldSelf,\n  \"nativeName\": yieldSelf,\n  \"population\": n => n ? n.toLocaleString() : \"unknown\",\n  \"subregion\": yieldSelf,\n  \"timezones\": (zoneArray) => {\n    if (!zoneArray.length) return \"Unknown\";\n    return getLocalTime(zoneArray[0]);\n  },\n};\n\nconst keyDisplayNames = {\n  \"area\": \"Area\",\n  \"capital\": \"Capital\",\n  \"demonym\": \"Demonym\",\n  \"languages\": \"Languages\",\n  \"name\": \"Name\",\n  \"nativeName\": \"Native Name\",\n  \"population\": \"Population\",\n  \"subregion\": \"Region\",\n  \"timezones\": \"Local Time\"\n};\n\nconst keyDisplayOrder = [\n  \"name\",\n  \"nativeName\",\n  \"subregion\",\n  \"languages\",\n  \"population\",\n  \"capital\",\n  \"demonym\",\n  \"area\",\n  \"timezones\",\n];\n\n\nconst Country = ({country}) => {\n  window.country = country;\n  if (!country) return null;\n\n  return (\n    keyDisplayOrder.map((k) => (\n      <p key={k}>{keyDisplayNames[k]}: {displayFuncs[k](country[k])}</p>\n    ))\n  );\n};\n\nexport default Country;\n","// Uses filter value to display only the options that match\nconst TypeaheadOptions = ({options, filterValue}) => {\n  const filterOptions = () => {\n    if (!filterValue) return options;\n\n    // low-budget string sanitization so '(' don't break the regex\n    let filterStr = filterValue.replaceAll(\"(\", \"\").replaceAll(\")\", \"\");\n    return options.filter(opt => RegExp(filterStr, 'i').test(opt))\n  };\n\n  return (\n    <>\n      {filterOptions().map(opt => (\n        <p value={opt} key={opt} className=\"country-dropdown-option\">{opt}</p>\n      ))}\n    </>\n  );\n};\n\nexport default TypeaheadOptions;\n","import { useState, createRef } from \"react\";\nimport TypeaheadOptions from \"./typeaheadOptions\";\n\nconst Typeahead = ({ options, selectedCountryName, setSelectedCountryName }) => {\n  const [inputVal, setInputVal] = useState(selectedCountryName);\n  const [focused, setFocused] = useState(false);\n\n  const inputRef = createRef();\n\n  const onOptionSelection = (countryName) => {\n    setInputVal(countryName);\n    setSelectedCountryName(countryName);\n    setFocused(false);\n  };\n\n  const cancel = () => {\n    setFocused(false);\n  };\n\n  const onChange = (e) => {\n    setInputVal(e.target.value);\n  };\n\n  const onKeyDown = (e) => {\n    if (e.key !== \"Escape\") return;\n    cancel();\n  };\n\n  const onKeyPress = (e) => {\n    if (e.key !== \"Enter\") return;\n    onOptionSelection(inputVal);\n  }\n\n  const clearInput = () => {\n    setInputVal(\"\");\n    inputRef.current.focus();\n  }\n\n  return (\n    <div className=\"typeahead-container\">\n      <input\n        tabIndex=\"0\"\n        type=\"text\"\n        id=\"typeahead-input\"\n        className=\"typeahead-input\"\n        placeholder=\"Choose a country\"\n        value={inputVal}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        onKeyPress={onKeyPress}\n        onFocus={() => setFocused(true)}\n        ref={inputRef}\n        // onBlur={onBlur}  onblur intercepts even the onMouseDown?\n      />\n      {inputVal?.length > 0 && (\n        <div\n          className=\"clear-input\"\n          onClick={clearInput}\n        >X</div>\n      )}\n      { focused && (\n        <div\n          className=\"country-dropdown width-100\"\n          onClick={(e) => onOptionSelection(e.target.innerText)}\n        >\n          <TypeaheadOptions options={options} filterValue={inputVal} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Typeahead;\n","import \"./loader.css\"\n\nexport default function () {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"lds-ripple\">\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n","import { useState } from \"react\";\n\nfunction useFetch(baseUrl) {\n  const [isFetching, setIsFetching] = useState(false);\n\n  const get = async (\n    url,\n    method = \"GET\",\n    // headers = { \"Content-Type\": \"application/json\" }, // was causing a CORS error\n    headers = {},\n    options\n  ) => {\n    setIsFetching(true);\n\n    const finalUrl = baseUrl + url;\n\n    try {\n      // console.log(\"Fetching url: \", finalUrl);\n      const response = await fetch(finalUrl, { method, headers, ...options });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`Request received code: ${response.status}`);\n      }\n\n      return data;\n    } catch (err) {\n      throw(err);\n    } finally {\n      setIsFetching(false);\n    }\n  };\n\n  return {\n    isFetching,\n    get,\n  }\n}\n\nexport default useFetch;\n","import { useState, useEffect } from \"react\";\nimport { debounce } from \"../util\";\n\nconst useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({ width: null, height: null });\n\n  useEffect(() => {\n    // Add event listener\n    window.addEventListener(\"resize\", debounce(handleResize, 100));\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const handleResize = () => {\n    setWindowSize({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  }\n\n  return windowSize;\n};\n\nexport default useWindowSize;\n","import {\n  MapContainer,\n  Marker,\n  Popup,\n  TileLayer,\n  useMap,\n} from \"react-leaflet\";\n\n\nconst Map = ({latitude, longitude, country}) => {\n  const FlyTo = () => {\n    const map = useMap();\n    const zoomLevel = zoomSwitcher(country.area);\n\n    // [lat, lng], zoomLevel, duration in seconds\n    map.flyTo([latitude, longitude], zoomLevel, { duration: 2 })\n\n    return null;\n  };\n\n  const zoomSwitcher = (area) => {\n    if (!area) { return 6; }\n    if (area < 1) { return 12; }\n    if (area < 1000) { return 10; }\n    if (area < 50000) { return 8; }\n    if (area < 100000) { return 7; }\n    if (area < 1000000) { return 6; }\n    if (area <= 10000000) { return 4; }\n    if (area > 10000000) { return 2; }\n  }\n\n  return (\n    <MapContainer\n      center={[latitude, longitude]}\n      zoom={4}\n      scrollWheelZoom={true}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <FlyTo />\n      {/*<Marker position={[lat, lng]}>*/}\n      {/*  <Popup>*/}\n      {/*    A pretty CSS3 popup. <br/> Easily customizable.*/}\n      {/*  </Popup>*/}\n      {/*</Marker>*/}\n    </MapContainer>\n  );\n};\n\nexport default Map;\n","import useFetch from \"./hooks/useFetch\";\nimport { useEffect, useState } from \"react\";\nimport { buildWeatherUrl } from \"./util\";\n\nconst Weather = ({ lat, lng }) => {\n  const [weather, setWeather] = useState(null);\n  const { isFetching, get } = useFetch(\"\");\n\n  useEffect(() => {\n    if (!lat || !lng) return null;\n\n    get(buildWeatherUrl(lat, lng))\n      .then(setWeather)\n      .catch(console.error);\n  }, [lat, lng])\n\n  if(!weather || isFetching) return <p>Weather: --</p>\n\n  const { weather: currentWeather, main } = weather;\n  const temp = `${Math.round(main.temp)}ÂºF`;\n  const desc = currentWeather[0].main;\n  const feelsLike = `${Math.round(main.feels_like)}ÂºF`;\n\n  return (\n    <p>Weather: {temp} and {desc}, feels like {feelsLike}</p>\n  )\n};\n\nexport default Weather;\n","export const COUNTRY_API_BASE_URL = \"https://restcountries.com/v2\";\nexport const WEATHER_API_BASE_URL = \"https://api.openweathermap.org/data/2.5/weather\"\nexport const WEATHER_APP_ID = \"fae8e49e14d1105c5ea04729cc0ceaab\";\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { COUNTRY_API_BASE_URL } from \"./constants\";\nimport Country from \"./country\";\nimport Typeahead from \"./typeahead\";\nimport Loader from \"./loader\";\nimport useFetch from \"./hooks/useFetch\";\nimport useWindowSize from \"./hooks/useWindowSize\";\nimport Map from \"./Map\";\nimport Weather from \"./weather\";\n\nfunction App() {\n  const [countryMap, setCountryMap] = useState({});\n  const [selectedCountryName, _setSelectedCountryName] = useState(null);\n  const [countryNameList, setNameList] = useState([]); // for display with proper case\n  const {isFetching, get: getCountries} = useFetch(`${COUNTRY_API_BASE_URL}`);\n  const windowSize = useWindowSize();\n\n  // Simple wrapper so we don't have to care about string case\n  const setSelectedCountryName = (countryName) => _setSelectedCountryName(countryName.toLowerCase());\n\n  useEffect(() => {\n    fetchCountryList()\n      .then((countryList) => {\n        window.countries = countryList; // for dev\n        buildInitialState(countryList)\n      });\n  }, []);\n\n  const fetchCountryList = async () => {\n    const res = await getCountries(\"/all\")\n    return res;\n  };\n\n  const chooseRandomCountry = (countryList) => {\n    const len = countryList.length;\n    const idx = Math.round(Math.random() * len);\n    const selected = countryList[idx]\n    setSelectedCountryName(selected.name);\n  };\n\n  const buildInitialState = (countryList) => {\n    const mapObj = {};\n    const nameList = [];\n\n    countryList.forEach(country => {\n      mapObj[country.name.toLowerCase()] = country;\n      nameList.push(country.name);\n    });\n\n    setCountryMap(mapObj);\n    setNameList(nameList);\n    chooseRandomCountry(countryList);\n  };\n\n  const selectedCountryObj = countryMap[selectedCountryName] || null;\n  let center = null;\n  if (selectedCountryObj) {\n    center = selectedCountryObj.latlng;\n  }\n\n  return (\n    <div className=\"App\">\n      { isFetching&& <Loader />}\n      { !isFetching&& (\n        <>\n          <div className=\"flex-container\">\n            <div className=\"column country-list\">\n              <Typeahead\n                options={countryNameList}\n                selectedCountryName={selectedCountryName}\n                setSelectedCountryName={setSelectedCountryName}\n              />\n            </div>\n            {center && <Map\n              country={selectedCountryObj}\n              latitude={center[0]}\n              longitude={center[1]}\n            /> }\n            <div className=\"column flag-display\">\n              {selectedCountryObj && (\n                <>\n                <img id=\"flag\" width=\"250\" src={selectedCountryObj.flag} />\n                <Country country={selectedCountryObj} />\n                <Weather\n                  lat={selectedCountryObj.latlng[0]}\n                  lng={selectedCountryObj.latlng[1]}\n                />\n                </>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}